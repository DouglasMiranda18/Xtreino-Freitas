rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isSelf(userId) { return isSignedIn() && request.auth.uid == userId; }
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Ceo','CEO','ceo','Gerente','GERENTE','gerente'];
    }

    // Admin: leitura global (qualquer coleção/documento)
    match /{path=**} {
      allow read: if isAdmin();
    }

    // users: cada usuário lê/escreve o próprio documento; Admins podem ler/escrever todos
    match /users/{userId} {
      allow read: if isSelf(userId) || isAdmin();
      allow write: if isSelf(userId) || isAdmin();
    }

    // schedules: leitura para logados; escrita para logados; admins podem listar tudo
    match /schedules/{docId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    // orders: leitura para admins; usuário pode ler os próprios (se tiver ownerId). Escrita para logados
    match /orders/{orderId} {
      allow read: if isAdmin() || (isSignedIn() && (resource.data.ownerId == request.auth.uid || resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid));
      allow write: if isSignedIn();
    }

    // registrations: usuário pode ler os próprios (campo userId) e admins leem tudo
    match /registrations/{regId} {
      allow read: if isAdmin() || (isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.uid == request.auth.uid));
      allow write: if isSignedIn();
    }

    // tokens: admins podem gerenciar, usuário lê o próprio saldo
    match /tokens/{tokenId} {
      allow read, write: if isAdmin();
    }
  }
}
